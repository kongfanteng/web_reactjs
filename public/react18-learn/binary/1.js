// 32 是指 32 个 bit，32 个 0 或者 1
// 8 位指的是 8 个 bit，8 个 0 或者 1

// 最小值 00000000
// 最大值 11111111 = 2 的 8 次方 -1

// 真值 8 位二进制数能表示的真值范围 -2^8 ~ 2^8
// + 00000001 => + 1
// - 00000001 => - 1

// -2^8 = - 11111111
// +2^8 = + 11111111

// 在计算机中表示的二进制数是补码，也就是负数用补码表示，正数用原码表示
// 补码的特点：
// 1. 正数和负数的补码相同
// 2. 正数的补码是原码，负数的补码是反码
// 3. 正数的补码是 1 位比原码多的，负数的补码

// 原码
// 因为计算机只能存0和1，不能存正负号
// 我们可以使用二进制的最高位来表示正负号，0表示正数，1表示负号，用后面的七位来表示真值的值
// 这种编码方式称为原码
// 10000000 => -0
// 00000000 => +0
// 因为最高位用来表示符号了，所以说原码，8 位的只能存的范围 -2^7 ~ +2^7-1, -128 ~ +127
// 01111111 => +127
// 11111111 => -127
// 00000000 => 0
// 10000000 => -128
// Q-原码问题：无法用 +1 加 -2，结果为 -3？使用反码解决；

// 反码
// 规则：
//   正数的反码和原码是一样的
//   负数的反码将符号位不变，其他位取反
//   反码的表示范围是 -2^7 ~ +2^7-1 => -128 ~ +127
// Q-反码问题：-0 与 +0 是一个值，无需用两个值表示？补码解决

// 补码
// 补码是为了简化运算，将减法用加法表示
// 正数的补码和原码一样
// 负数的补码是反码+1
// 8 位的补码表示范围 -2^7 ~ +2^7-1 => -128 ~ +127
// 001+111=1000 -> 最高位溢出舍弃 => 000 => 0

// 快速计算补码
// 由原码低位向高位找到第一个 1,1 和其低位不变，1 前面的高位按位取反即可
// 原码 => 101 => -1
// 反码 => 110 => -1
// 补码 => 111 => -1
// 原码 10011100
// 补码 11100100
// 补码意义：简化减法计算，用加法取代

// 为了简化减法运算，JS 中任何数字的位运算都会先转成整数
// 区分正负号的
// 在 JS 中表示范围是 -2^31 ~ +2^31-1 => -2147483648 ~ 2147483647

// 位操作: ~ 操作符会将操作符的每一位取反，取反得到的数是 -(原数+1)
// ~
let a = 0b00000011 // 3
console.log(a) // -4
// zhufengpeixun.com/strong/html/unit.html
